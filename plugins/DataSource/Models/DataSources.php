<?php
namespace plugins\DataSource\Models;
use Phalcon\Db\Adapter\PdoFactory as DB;
use Phalcon\Di\FactoryDefault;
use PowerModelBase as PMB;

class DataSources extends PMB{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->setSource(\PA::$config->path('pa_db.prefix').'datasources');
    }

    public static function getSources(array $filter=[], $only_system=false){
        # 配置中的数据源
        $id = 1;
        foreach(\PA::$config as $key=>$value){
            if(is_object($value) && $value->has('adapter')){
                $v = $value->toArray();
                $v['source_id'] = $id++;
                $v['name'] = $key;
                $v['injection_name'] = $key;
                $v['bind_events_manager'] = 1;
                $v['status'] = 1;
                $v['created_user'] = 1;
                $v['updated_user'] = 1;
                $v['_CAN_SELECT_'] = 0;
                yield $v;
            }
        }

        # 数据库中的数据源
        if(!$only_system) {
            $where = [];
            self::parseWhere(['where' => $filter], $where);
            foreach (self::find($where) as $row) yield $row->toArray();
        }
    }

    public static function getDB(array $config){
        if($config['name'] === 'pa_db')              return \PA::$db;
        if(\PA::$di->has($config['injection_name'])) return \PA::$di->get($config['injection_name']);

        switch($config['adapter']){
            case 'sqlite':
                $connect = ['dbname' => $config['dbname']];
                break;
            case 'mysql':
            case 'postgresql':
            default:
                $connect = [
                    'host'     => $config['host'] ?: 'localhost',
                    'port'     => $config['port'] ?? '3306',
                    'dbname'   => $config['dbname'],
                    'username' => $config['username'] ?? 'root',
                    'password' => $config['password'],
//                               'options'  => [\PDO::ATTR_TIMEOUT=>3], # 3秒超时
                    'charset'  => 'utf8mb4'
                ];
                break;
        }

        try{
            return (new DB)->newInstance($config['adapter'], $connect);
        }catch (\Throwable $e){
            return null;
        }
    }

    /**
     * 使用ID获取数据库连接对象
     * @param int $id
     * @return mixed|\Phalcon\Db|\Phalcon\Db\Adapter\AdapterInterface|null
     */
    public static function getDBbyId(int $id){
//        if($id==1) return \PA::$db;
        $all = array_column(iterator_to_array(self::getSources()), null,'source_id');
        return self::getDB($all[$id]);
    }

    public static function getModel($id, $table){
        $di_cache[$id] = new FactoryDefault();
        $di_cache[$id]->set('db', DataSources::getDBbyId($id));
        $table_cls = new \stdClass();
        $table_cls->name = $table;
        $di_cache[$id]->set('table', $table_cls);
        return new class(null, $di_cache[$id]) extends \Phalcon\Mvc\Model {
            function initialize(){
                $this->setSource($this->getDI()->get('table')->name);
            }
        };
    }
}
